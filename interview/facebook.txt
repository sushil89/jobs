#magine you are given a plain text, ASCII, English document, something
#like a book from Project Gutenberg. Develop a concordance for the book 
# -- the number of times each word appears -- and then print the top N most frequent
# words and how many times they occur. N can be either hardcoded or a parameter.

# This is screen save of my answer. There are many errors in this
# solution

#include <stdio.h>

#define MAX_HASH_TAB 1024
struct node_t {
  struct node_t *next;
  char *word;
  unsigned int freq;
}  
  
struct node_t *hash[MAX_HASH_TAB];

int main(int argc, char **argv[])
{
  //
  if (argc != 2) {
      printf("Usage: %s <input_file_name\n", argv[1];
      exit(1);
  }
  int fd = open(argv[1], "r");
  //Check error and return if error
  int max_hash = MAX_HASH_TAB;
  char *word;
  while ((word = read_word_from_file(fd)) != NULL) {
        int word_len = strlen(word);
        int hash_index = word_len % max_hash;
        scan_ptr = hash[hash_index];
        match = 0;
        prev = scan_ptr;
        While (scan_ptr && !match) {
         
          if (strcmp(scan_ptr->word, word) == 0) {
                match = 1;
                scan_ptr->freq++;
          }
          else {
              prev = scan_ptr;
              scan_ptr = scan_ptr->next;
          }
        }
    
        if (scan_ptr == NULL) {
            struct node_t *new = malloc(sizeof(struct node_t *));
            new->word = word;
            new->freq = 0;
            new->next = NULL;
          
            if (prev == NULL) {
                hash[hash_index] = new;
            }
            else {
                prev->next = new;
            }
        }
      
  } /* while */
  
}  
struct node_t *freq[N];

